root: NAME " " cardcosts "\n" types "\n" abilities stats "\n\n"?
types: maintype (" - " subtype)?
maintype: TYPE
subtype: /[ a-zA-Z]+/
stats: numberorx "/" numberorx

cardcosts: essencecost
abilitycosts: essencecost ", " activationcost ", " imperativescost | activationcost ", " imperativescost | essencecost ", " imperativescost | essencecost ", " activationcost | activationcost | essencecost | imperativescost
essencecost: ("{{" COLOR "}}")* ("{{" numberorx "}}") | ("{{" COLOR "}}")+ | "{{0}}"
activationcost: activatecost | deactivatecost
deactivatecost: "{{T}}"
activatecost: "{{Q}}"

abilities: (ability "\n")*
ability: keywords | activatedability | triggeredability | extracosts | effects
tokenability: keywords | activatedability | triggeredability | objecteffect
keywords: keyword (", " keyword)*
keyword: KEYWORD
activatedability: abilitycosts ":" " " effects
extracosts: "Extra cost:" " " imperativescost
acquiredability: "\"" tokenability "\"" (" and \"" tokenability "\"")* | "this ability"
imperativescost: imperativecost (", " imperativecost)*
imperativecost: return | discard | sacrifice | paylife

triggeredability: triggercondition ", " ("if " condition ", ")? effects
triggercondition: W ("hen " | "henever ") (whenyouplay | whengainlife | whenloselife | whendamaged) | endofturn | beginningofphase
whenyouplay: "you play " objects
whengainlife: players " gain" "s"? " life"
whenloselife: players " lose" "s"? " life"
whendamaged: objects " is dealt damage"

effects: (composedeffect | may) "."
may: (Y "ou ")? "may " imperative (". " ("If" | "When") " you do, " composedeffect)?
composedeffect: effect ((", " | ". ") (opandthen " ")? effect)*
effect: imperative | objecteffect | playereffect | conditionaleffect
objecteffect: objects " " objectphrase
playereffect: players " " playerphrase
conditionaleffect: I "f " (playercondition | objectcondition) (imperative | objecteffect | playereffect)

imperative: i (" for each " pureobject)? (", where X is " numberdefinition)? (" unless " condition)?


objectphrase: op (("," op)* opandorthen op)? (" if " condition)?
playerphrase: pp
| pp " for each " object
| pp " for the first time each turn"
| pp ", then " pp
| pp " this way"

i: createtoken | destroy | copy | play | draw | search | shuffle | counter | activate | deactivate | extraturn | look | put | gaincontrol | switchdmghp | addessence | return | discard | sacrifice | payessence | paylife | reveals

createtoken: C "reate " number " " stats (" token" | " tokens") (" with " acquiredability)?
destroy: D "estroy " objects
copy: C "opy " objects
play: P "lay" "s"? " " objects (" " free)?
draw: D "raw" "s"? " " ("a card" | number " cards")
discard: D "iscard" "s"? " " ("a card" | number " cards" | number " " objects)
search: S "earch " zones (" for " objects)?
shuffle: S "huffle" "s"? (" " (objects | zones) " into ")? zones
counter: C "ounter " objects
extraturn: T "ake an extra turn after this one"
look: L "ook at the top " number " cards of " zones
put: P "ut" "s"? " " objects " " into (" " deactivated)? (" and " objects " " into)?
gaincontrol: G "ain" "s"? " control of " objects (" " until)?
switchdmghp: S "witch the damage and health of " objects (" " until)?
addessence: A "dd " ("one essence of any color" | number " essence of any one color" | esscolor ((", " esscolor)* " or " esscolor)?)
activate: A "ctivate " objects
deactivate: D "eactivate " objects
return: R "eturn " objects (" from " zones)? " to " zones
sacrifice: S "acrifice" "s"? " " objects
payessence: P "ay " essencecost
paylife: P "ay " numberorxorthat " life"
reveals: R "eveal" "s"? " " possesion " hand"

pp: gainsxlife | gainseqlife | loseaction | losethegame | imperative
gainsxlife: "gain" "s"? " " numberorx " life"
gainseqlife: "gain" "s"? " life equal to " itspossesion " " numberical
loseaction: "can't " imperative
losethegame: "lose" "s"? " the game"

playercondition: players " " pc
pc: conditionaction | controls | gainslife | doesnt | does
conditionaction: sacrifice | put | look | counter | search | discard | draw | play
controls: ("own" | "control") "s"? " " objects
gainslife: "gain" "s"? " life"

op: hasability | getsability | getsmod | objectcantdo | noactivate | losesabilities | costsless | costsmore | entersdeactivated | becomeswhat
hasability: ("has " | "have ") acquiredability (" as long as " condition)?
getsability: "gain" "s"? " " acquiredability (" and gets " mod)? (" " until)?
getsmod: "get" "s"? " " mod (" and gains " acquiredability)? (" " until)?
objectcantdo: "can't " objectcant (" " duration)?
noactivate: "doesn't activate during " moment
losesabilities: "lose" "s"? " all abilities" (" " until)?
costsless: "cost" "s"? " " essencecost " less to play" (" " foreach)?
costsmore: "cost" "s"? " " essencecost " more to play" (" " foreach)?
entersdeactivated: "enter" "s"? " the field deactivated" (" under " possesion " control")?
becomeswhat: "is " color (" " coloraddition)? | stats | type (" " typeaddition)?

objectcondition: objects " " oc
oc: blocked | attacked | targets | leaves | dies | moveszone | whenenters | dealswhat
blocked: "blocks or becomes blocked by " objects
attacked: "attack" "s"?
targets: "targets " objects
leaves: "leave" "s"? " the field"
dies: "die" "s"?
moveszone: "is put " into (" from " zones)?
whenenters: "enter" "s"? " the field" (" under " possesion " control")?
dealswhat: "deals " deals

# "do so"
# "does so"
# "becomes " becomes
# ("is" | "are") " created"
# "is countered this way"
# "causes " players " to discard " objects

into: "onto " field | "into " zones | (top | bottom) " " orderedzone (" " (ordered | random))?
top: "on top of"
bottom: "on the bottom of"
ordered: "in any order"
random: "in a random order"
place: "on " field | "in " zones
zones: (possesion | a) " " zone ((", " zone)* opandor zone)? | field | it
zone: orderedzone | hand
orderedzone: deck | discardzone
field: "the field"
hand: "hand"
deck: "deck"
discardzone: "discard"

players: you | they | p (" " whocant)?
p: ("Y" | "y") "our " opponent "s"? | defending "player" | attacking "player" | refplayer | itspossesion " " (owners | controllers)
refplayer: reference " " pureplayer
pureplayer: opponent | player "s"?
itspossesion: objects "'s" | its | their
possesion: your | their | players "'s"
owners: "owner" | "owners"
controllers: "controller" | "controllers"

objects: object ((", " object)* opandor object)? | each " of " object
object: selfref | it | they | one | other | refobject | specifiedobject | copyof | withoutkeyword | objectwith | pureobject

referenceprefix: refsacrificed | anyof | the | reference | countable
reference: each | all | a | this | that | another | chosen | atleast | counted | target
counted: countable (" " reference)?
target: (another " ")? (countable " ")? "target"
countable: exactly | ormore | fewerthan | upto | anynumberof | oneof  | number
prefix: activated | deactivated | nontype | token | nontoken | attacking | blocking | attackingorblocking | stats
nontype: N "on-" type

suffix: playercontrol | playernocontrol | playerown | playernoown | inzones | youplay | thattargets | thattargetsonly | activatedthisway | deactivatedthisway | chosentype | couldtarget | amongthem
playercontrol: players " " ("control" | "controls")
playernocontrol: players " " ("don't" | "doesn't") " control"
playerown: players " " ("own" | "owns")
playernoown: players " " ("don't own" | "doesn't own")
inzones: "in " zones (" and in " zones)? | "from " zones
thattargets: "that targets " objects
thattargetsonly: "that targets only " objects
couldtarget: objects " could target"
chosentype: "of the " type " type of " possesion " choice"
activatedthisway: "activated this way"
deactivatedthisway: "deactivated this way"
amongthem: "from among them"
youplay: "you play"

refobject: referenceprefix " " pureobject
specifiedobject: (prefix " ")+ pureobject  (" " suffix)?
copyof: C "opy" (" of " pureobject)?
withoutkeyword: pureobject " without " keyword
objectwith: pureobject " " with
pureobject: copies | typecard | tokencard | abilityref
typecard: (type " ")? "card" "s"?

deals: "combat "? "damage to " damagerecipient
| numberorxorthat " damage to " damagerecipient
| "damage equal to " numberdefinition " to " damagerecipient
| "damage to " damagerecipient " equal to " numberdefinition
| numberorxorthat " damage spread between any target"
damagerecipient: objects | players | "any target" | "itself"
| "target " damagerecipient " or " damagerecipient

with: numberical " " numbericalcompare
| "the highest " numberical " among " objects
| "level " numberorxorthat
| acquiredability
what: color | objects | place | type
becomes: "deactivated" | "activated" | "a copy of " objects (", except " copyexception (", " ("and ")? copyexception)*)?
copyexception: "its name is " NAME | "it is " what
objectcant: attack | block | attackorblock | becountered
attack: "attack"
block: "block"
attackorblock: "attack or block"
beblocked: "be blocked"
becountered: "be countered"
activateability: "activate abilities"
foreach: "for each " object
numberical: "damage" | "health" | "level"
numbericalcompare: numberorx " or greater"
| numberorx " or less"
| "less than or equal to " numberdefinition
| "greater than " numberdefinition
| numberorx
numberdefinition: itspossesion " " numberical | T "he number of " objects
typeaddition: "in addition to its other types"
coloraddition: "in addition to its other colors"

condition: playedwhen | yourturn | notyourturn | compare | playercondition | objectcondition
playedwhen: "you've played " objects " " duration
compare: numberdefinition " is " numbericalcompare
yourturn: "it's your turn"
notyourturn: "it's not your turn"

duration: thisturn | "for as long as " condition | until
until: "until " (condition | "end of turn")
thisturn: "this turn"
moment: turnqualifier " " phase | "fight on your turn"
turnqualifier: (possesion | the) (" " next)? | each | (this | that) " turn's"?
phase: turn | activationphase | drawphase | playphase | fightphase | cleanup
turn: "turn"
activationphase: "activation"
drawphase: "draw step"
playphase: "play phase"
fightphase: "fight phase"
cleanup: "cleanup"
beginningofphase: A "t the beginning of " moment
next: "next"

copies: C "opies"
tokencard: T "oken" "s"?
abilityref: A "bilit" ("y" | "ies")
activated: A "ctivated"
deactivated: D "eactivated"
token: T "oken"
nontoken: N "ontoken"
attacking: A "ttacking"
defending: D "efending"
blocking: B "locking"
attackingorblocking: A "ttacking or blocking"
refsacrificed: T "he sacrificed"
anyof: A "ny of"
the: T "he"
each: E "ach"
all: A "ll" (" the")?
this: T "his"
that: T ("hat" | "hese"| "hose")
a: A "n"?
another: A "nother"
chosen: T "he chosen"
it: I "t"
other: T ("he rest" | "he other")
you: Y "ou"
they: T "hey"
endofturn: A "t end of the turn"
its: I "ts"
their: T "heir"
your: Y "our"
opponent: O "pponent"
player: P "layer"
doesnt: "doesn't" | "don't"
does: "does" | "do"

free: "without paying essence"
whocant: "who can't"

mod: plusminus numberorx "/" plusminus numberorx (" " foreach)?
plusminus: /[+-]/
numberorxorthat: numberorx | thatmany
numberorx: smallnumber | x
number: a | one | two | three | four | five | six | seven | eight | nine | ten | x | thatmany | smallnumber

exactly: E "xactly " number
ormore: number " or more"
fewerthan: F "ewer than " number
upto: U "p to " number
atleast: A "t least " number
anynumberof: A "ny number of"
oneof: O "ne of"
thatmany: "that many" | "that much"
one: O "ne"
two: "two"
three: "three"
four: "four"
five: "five"
six: "six"
seven: "seven"
eight: "eight"
nine: "nine"
ten: "ten"
x: "X"

opandorthen: " " (and | or | then) " "
opandor: " " (and | or | andor) " "
opandthen: (and | then)
and: "and"
or: "or"
andor: "and/or"
then: T "hen" ","?

color: "red" | "green" | "blue" | "white" | "colorless"
selfref: NAME
type: TYPE
esscolor: COLOR
smallnumber: /[1]?[0-9]/

COLOR: "R" | "G" | "B" | "W"
TYPE: {types}
KEYWORD: {keywords}
NAME: {name}

A: /[aA]/
B: /[bB]/
C: /[cC]/
D: /[dD]/
E: /[eE]/
F: /[fF]/
G: /[gG]/
H: /[hH]/
I: /[iI]/
J: /[jJ]/
K: /[kK]/
L: /[lL]/
M: /[mM]/
N: /[nN]/
O: /[oO]/
P: /[pP]/
Q: /[qQ]/
R: /[rR]/
S: /[sS]/
T: /[tT]/
U: /[uU]/
V: /[vV]/
W: /[wW]/
X: /[xX]/
Y: /[yY]/
Z: /[zZ]/
